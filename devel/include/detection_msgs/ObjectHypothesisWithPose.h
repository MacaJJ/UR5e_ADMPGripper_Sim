// Generated by gencpp from file detection_msgs/ObjectHypothesisWithPose.msg
// DO NOT EDIT!


#ifndef DETECTION_MSGS_MESSAGE_OBJECTHYPOTHESISWITHPOSE_H
#define DETECTION_MSGS_MESSAGE_OBJECTHYPOTHESISWITHPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace detection_msgs
{
template <class ContainerAllocator>
struct ObjectHypothesisWithPose_
{
  typedef ObjectHypothesisWithPose_<ContainerAllocator> Type;

  ObjectHypothesisWithPose_()
    : Class()
    , score(0.0)
    , pose()  {
    }
  ObjectHypothesisWithPose_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , score(0.0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Class_type;
  _Class_type Class;

   typedef double _score_type;
  _score_type score;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectHypothesisWithPose_

typedef ::detection_msgs::ObjectHypothesisWithPose_<std::allocator<void> > ObjectHypothesisWithPose;

typedef boost::shared_ptr< ::detection_msgs::ObjectHypothesisWithPose > ObjectHypothesisWithPosePtr;
typedef boost::shared_ptr< ::detection_msgs::ObjectHypothesisWithPose const> ObjectHypothesisWithPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator1> & lhs, const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.score == rhs.score &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator1> & lhs, const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89cf9c36df70a761869a8c1170b49418";
  }

  static const char* value(const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89cf9c36df70a761ULL;
  static const uint64_t static_value2 = 0x869a8c1170b49418ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_msgs/ObjectHypothesisWithPose";
  }

  static const char* value(const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An object hypothesis that contains position information.\n"
"\n"
"# The unique numeric ID of object detected. To get additional information about\n"
"#   this ID, such as its human-readable name, listeners should perform a lookup\n"
"#   in a metadata database. See vision_msgs/VisionInfo.msg for more detail.\n"
"string Class\n"
"\n"
"# The probability or confidence value of the detected object. By convention,\n"
"#   this value should lie in the range [0-1].\n"
"float64 score\n"
"\n"
"# The 6D pose of the object hypothesis. This pose should be\n"
"#   defined as the pose of some fixed reference point on the object, such a\n"
"#   the geometric center of the bounding box or the center of mass of the\n"
"#   object.\n"
"# Note that this pose is not stamped; frame information can be defined by\n"
"#   parent messages.\n"
"# Also note that different classes predicted for the same input data may have\n"
"#   different predicted 6D poses.\n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.score);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectHypothesisWithPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_msgs::ObjectHypothesisWithPose_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Class);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_MSGS_MESSAGE_OBJECTHYPOTHESISWITHPOSE_H
